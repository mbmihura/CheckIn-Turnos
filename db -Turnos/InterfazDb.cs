using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using dbTurnos.Excepciones;
using dbTurnos.DataSQL;
using System.IO;
using System.Diagnostics;

namespace dbTurnos
{
    public static class InterfazDb
    {
        static Log2File _log;

        /// <exception cref="dbTurnos.LoadingLog2FileException">Ocurre cuando el no se puede iniciar el sistema de log de eventos. Encapsula el error original.</exception>
        public static void Iniciar(string appPath, Log2File traceListener)
        {
            AutoGeneratedDataTable.CadenaConexion = new Properties.Settings().Bar_TurnosConnectionString;
            SQLNoConsulta.CadenaConexion = new Properties.Settings().Bar_TurnosConnectionString;
            _log = traceListener;
            _log.WriteLine("InterfazDb iniciada.");
        }
        /// <exception cref="dbTurnos.LoadingLog2FileException">Ocurre cuando el no se puede iniciar el sistema de log de eventos. Encapsula el error original.</exception>
        public static void Iniciar(string appPath)
        {
            Iniciar(appPath, new Log2File(appPath + "\\dbEvents.log", false));
        }

        /// <summary>Devuelve un dataTable con los turnos abiertos en la db.</summary>
        /// <exception cref="System.InvalidOperationException"></exception>
        /// <exception cref="System.Data.OleDb.OleDbException"></exception>
        public static DataTable getTurnosAbiertos()
        {
            try
            {
                return new AutoGeneratedDataTable("SELECT Usuarios.usuario, Usuarios.nombre, Turnos.fechaInicio, Usuarios.id FROM Usuarios INNER JOIN Turnos ON Usuarios.id = Turnos.idUsuario WHERE Turnos.fechaFin is Null");
            }
            catch (Exception ex)
            {
                _log.TraceException(ex);
                throw ex;
            }
        }

        /// <summary>Abre un turno para un usuario, con le fecha especifica, siempre cuando no exista uno ya abierto.</summary>
        /// <exception cref="System.InvalidOperationException"></exception>
        /// <exception cref="System.Data.OleDb.OleDbException"></exception>
        /// <exception cref="dbTurnos.Excepciones.YaTieneTurnoAbiertoException"></exception>
        public static void AbrirTurno(int idUsuario, DateTime inicio)
        {
            try
            {
                //HACK: filtrar campos contra SQL inyection.
                if (new AutoGeneratedDataTable("SELECT id FROM Turnos WHERE idUsuario = " + idUsuario + " AND fechaFin Is Null").Rows.Count != 0)
                    throw new YaTieneTurnoAbiertoException();
                new SQLNoConsulta("INSERT INTO Turnos (idUsuario, fechaInicio) VALUES ('" + idUsuario + "', #" + inicio.ToString("yyyy/MM/dd HH:mm:ss") + "#)");
            }
            catch (Exception ex)
            {
                _log.TraceException(ex);
                throw ex;
            }
        }

        /// <summary>Cierra el turno abierto para un usuario especifico.</summary>
        /// <exception cref="System.InvalidOperationException"></exception>
        /// <exception cref="System.Data.OleDb.OleDbException"></exception>
        /// <exception cref="System.FormatException"></exception>
        /// <exception cref="System.InvalidCastException"></exception>
        /// <exception cref="dbTurnos.Excepciones.NoHayTurnoAbiertoException"></exception>
        /// <exception cref="dbTurnos.Excepciones.InicioTurnoMayorQueFinException"></exception>
        public static void CerrarTurno(int idUsuario, DateTime fin)
        {
            try
            {            
                //HACK: filtrar campos contra SQL inyection.
                AutoGeneratedDataTable turnoAbierto = new AutoGeneratedDataTable("SELECT idUsuario, fechaInicio FROM Turnos WHERE (idUsuario = " + idUsuario + " AND fechaFin Is Null)");
                if (turnoAbierto.Rows.Count == 0)
                    throw new NoHayTurnoAbiertoException();
                DateTime inicio = Convert.ToDateTime(turnoAbierto.Rows[0]["fechaInicio"]);
                if (inicio > fin)
                    throw new InicioTurnoMayorQueFinException("La fecha con la que intenta cerrar el turno (" + fin.ToShortDateString() +" "+fin.ToShortTimeString()+") es anterior a la fecha de inicio (" + inicio.ToShortDateString() + " " + inicio.ToShortTimeString() + ").");
                new SQLNoConsulta("UPDATE Turnos SET fechaFin = #" + fin.ToString("yyyy/MM/dd HH:mm:ss") + "# WHERE (idUsuario  = " + idUsuario + ") AND (fechaFin IS NULL)");
            }
            catch (Exception ex)
            {
                _log.TraceException(ex);
                throw ex;
            }
        }

        /// <summary>Cambia la contraseña de un usuario espefcifico.</summary>
        /// <exception cref="System.InvalidOperationException"></exception>
        /// <exception cref="System.Data.OleDb.OleDbException"></exception>
        /// <exception cref="dbTurnos.Excepciones.ContraseñaNoPuedeSerNula"></exception>
        public static void CambiarContraseña(int idUsuario, string nuevaContraseña)
        {
            try
            {
                if (nuevaContraseña == "") throw new ContraseñaNoPuedeSerNula();
            //HACK: YA cifrar contraseña
            new SQLNoConsulta("UPDATE Usuarios SET Usuarios.contraseñaSHA = '"+nuevaContraseña+"' WHERE Usuarios.id="+idUsuario);

            }
            catch (Exception ex)
            {
                _log.TraceException(ex);
                throw ex;
            }
        }

        /// <summary>Devuelve el id del usuario que coincide con  el par usuario/contraseña.</summary>
        /// <exception cref="System.InvalidOperationException"></exception>
        /// <exception cref="System.Data.OleDb.OleDbException"></exception>
        /// <exception cref="dbTurnos.Excepciones.ParUsuarioContraseñaIncorrectoException"></exception>
        /// <exception cref="System.FormatException"></exception>
        /// <exception cref="System.InvalidCastException"></exception>
        /// <exception cref="System.OverflowException"></exception>
        public static int Identificar(string usuario, string contraseña)
        {
            DataTable idTable;
            //HACK: YA cifrar contraseña
            //HACK: filtar caracteres especiales usuario, cifrar contraseña.

            idTable = new AutoGeneratedDataTable("SELECT TOP 1 Usuarios.id FROM Usuarios WHERE (((Usuarios.usuario)='" + usuario + "') AND ((Usuarios.contraseñaSHA)='" + contraseña + "'))");
            try
            {
                return Convert.ToInt32(idTable.Rows[0][0]);
            }
            catch (IndexOutOfRangeException)
            {
                Exception ex =  new ParUsuarioContraseñaIncorrectoException();
                _log.TraceException(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                _log.TraceException(ex);
                throw ex;
            }
        }

        /// <exception cref="System.InvalidOperationException"></exception>
        /// <exception cref="System.Data.OleDb.OleDbException"></exception>
        public static bool esAdmin(int idUsuario)
        {
            try
            {
                return new AutoGeneratedDataTable("SELECT id FROM Usuarios WHERE id=" + idUsuario + " AND esAdmin = True").Rows.Count > 0;
            }
            catch (Exception ex)
            {
                _log.TraceException(ex);
                throw ex;
            }
        }

        /// <exception cref="System.InvalidOperationException"></exception>
        /// <exception cref="System.Data.OleDb.OleDbException"></exception>
        public static DataTable getUsuarios()
        {
            try
            {           
                return new AutoGeneratedDataTable("SELECT id, usuario, nombre, esAdmin FROM Usuarios");
            }
            catch (Exception ex)
            {
                _log.TraceException(ex);
                throw ex;
            }
        }

        /// <exception cref="System.InvalidOperationException"></exception>
        /// <exception cref="System.Data.OleDb.OleDbException"></exception>
        public static void UsuariosEliminar(int idUsuario)
        {
            try
            {
                new SQLNoConsulta("DELETE idUsuario FROM Turnos WHERE idUsuario = " + idUsuario);
            new SQLNoConsulta("DELETE usuario FROM Usuarios WHERE (id="+idUsuario+")");
            }
            catch (Exception ex)
            {
                _log.TraceException(ex);
                throw ex;
            }
        }

        /// <exception cref="System.InvalidOperationException"></exception>
        /// <exception cref="System.Data.OleDb.OleDbException"></exception>
        public static object getTurnosCumplen(string _filtro)
        {
            try
            {            
                return new AutoGeneratedDataTable("SELECT Usuarios.nombre AS Nombre, Turnos.fechaInicio AS Inicio, Turnos.fechaFin AS Fin FROM (Turnos INNER JOIN Usuarios ON Turnos.idUsuario = Usuarios.id) " + _filtro);
            }
            catch (Exception ex)
            {
                _log.TraceException(ex);
                throw ex;
            }
        }

        /// <exception cref="System.InvalidOperationException"></exception>
        /// <exception cref="System.Data.OleDb.OleDbException"></exception>
        public static void UsuarioEditar(int idUsuarioACambiar, string usuario, string nombre, string contraseña, bool requiereCambio, bool habilitado, bool esAdmin)
        {
            try
            {            
                new SQLNoConsulta("UPDATE Usuarios SET usuario = '"+ usuario +"', nombre = '"+nombre+"', contraseñaSHA = '"+contraseña+"', requiereCambio = "+ requiereCambio.ToString() +", estaHabilitado = "+habilitado.ToString()+", esAdmin = "+esAdmin.ToString()+" WHERE (usuario="+idUsuarioACambiar+")");
            }
            catch (Exception ex)
            {
                _log.TraceException(ex);
                throw ex;
            }
        }

        /// <exception cref="System.InvalidOperationException"></exception>
        /// <exception cref="System.Data.OleDb.OleDbException"></exception>
        public static void UsuarioEditar(int idUsuarioAcambiar, string usuario, string nombre, bool requiereCambio, bool habilitado, bool esAdmin)
        {
            try
            {            
                new SQLNoConsulta("UPDATE Usuarios SET usuario = '" + usuario + "', nombre = '" + nombre + "', requiereCambio = " + requiereCambio.ToString() + ", estaHabilitado = " + habilitado.ToString() + ", esAdmin = " + esAdmin.ToString() + " WHERE (usuario=" + idUsuarioAcambiar + ")");
            }
            catch (Exception ex)
            {
                _log.TraceException(ex);
                throw ex;
            }
        }

        /// <exception cref="System.InvalidOperationException"></exception>
        /// <exception cref="System.Data.OleDb.OleDbException"></exception>
        /// <exception cref="dbTurnos.Excepciones.NoExisteUsuarioException"></exception>
        /// <exception cref="System.FormatException"></exception>
        /// <exception cref="System.InvalidCastException"></exception>
        /// <exception cref="System.OverflowException"></exception>
        public static int getUsuarioId(string usuario)
        {
            try
            {
                return Convert.ToInt32(new AutoGeneratedDataTable("SELECT id FROM Usuario WHERE usuario = '" + usuario + "'").Rows[0][0]);
            }
            catch (IndexOutOfRangeException)
            {
                Exception ex = new NoExisteUsuarioException();
                _log.TraceException(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                _log.TraceException(ex);
                throw ex;
            }
        }

        /// <exception cref="System.InvalidOperationException"></exception>
        /// <exception cref="System.Data.OleDb.OleDbException"></exception>
        public static void UsuarioNuevo(string usuario, string nombre, string contraseña, bool requiereCambio, bool habilitado, bool esAdmin)
        {
            try
            {           
                new SQLNoConsulta("INSERT INTO Usuarios(usuario, nombre, contraseñaSHA, requiereCambio, estaHabilitado, esAdmin) Values ('" + usuario + "', '" + nombre + "', '" + contraseña + "', " + requiereCambio.ToString() + ", " + habilitado.ToString() + ", " + esAdmin.ToString() + ")");
            }
            catch (Exception ex)
            {
                _log.TraceException(ex);
                throw ex;
            }
         }

        /// <exception cref="System.InvalidOperationException"></exception>
        /// <exception cref="System.Data.OleDb.OleDbException"></exception>
        /// <exception cref="System.IndexOutOfRangeException"></exception>
        public static string UsuarioGetNombre(int idUsuario)
        {
            try
            {            
                return new AutoGeneratedDataTable("SELECT nombre FROM Usuarios WHERE id = " + idUsuario).Rows[0][0].ToString();
            }
            catch (Exception ex)
            {
                _log.TraceException(ex);
                throw ex;
            }
        }

        /// <exception cref="System.InvalidOperationException"></exception>
        /// <exception cref="System.Data.OleDb.OleDbException"></exception>
        /// <exception cref="System.IndexOutOfRangeException"></exception>
        public static string UsuarioGetUsuario(int idUsuario)
        {
            try
            {            
                return new AutoGeneratedDataTable("SELECT usuario FROM Usuarios WHERE id = " + idUsuario).Rows[0][0].ToString();
            }
            catch (Exception ex)
            {
                _log.TraceException(ex);
                throw ex;
            }
        }

        /// <exception cref="System.InvalidOperationException"></exception>
        /// <exception cref="System.Data.OleDb.OleDbException"></exception>
        /// <exception cref="System.IndexOutOfRangeException"></exception>
        /// <exception cref="System.FormatException"></exception>
        /// <exception cref="System.InvalidCastException"></exception>
        /// <exception cref="System.OverflowException"></exception>
        public static int UsuarioGetId(string usuario)
        {
            try
            {
                return Convert.ToInt32(new AutoGeneratedDataTable("SELECT id FROM Usuarios WHERE usuario = '" + usuario + "'").Rows[0][0]);
            }
            catch (Exception ex)
            {
                _log.TraceException(ex);
                throw ex;
            }
        }

        /// <exception cref="System.InvalidOperationException"></exception>
        /// <exception cref="System.Data.OleDb.OleDbException"></exception>
        /// <exception cref="System.IndexOutOfRangeException"></exception>
        /// <exception cref="System.FormatException"></exception>
        /// <exception cref="System.InvalidCastException"></exception>
        public static bool UsuarioGetHabilitado(int idUsuario)
        {
            try
            {            
                return Convert.ToBoolean(new AutoGeneratedDataTable("SELECT estaHabilitado FROM Usuarios WHERE id = " + idUsuario).Rows[0][0]);
            }
            catch (Exception ex)
            {
                _log.TraceException(ex);
                throw ex;
            }
        }

        /// <exception cref="System.InvalidOperationException"></exception>
        /// <exception cref="System.Data.OleDb.OleDbException"></exception>
        /// <exception cref="System.IndexOutOfRangeException"></exception>
        /// <exception cref="System.FormatException"></exception>
        /// <exception cref="System.InvalidCastException"></exception>
        public static bool UsuarioGetAdmin(int idUsuario)
        {
            try
            {            
                return Convert.ToBoolean(new AutoGeneratedDataTable("SELECT esAdmin FROM Usuarios WHERE id = " + idUsuario).Rows[0][0]);
            }
            catch (Exception ex)
            {
                _log.TraceException(ex);
                throw ex;
            }
        }

        /// <exception cref="System.InvalidOperationException"></exception>
        /// <exception cref="System.Data.OleDb.OleDbException"></exception>
        /// <exception cref="System.IndexOutOfRangeException"></exception>
        /// <exception cref="System.FormatException"></exception>
        /// <exception cref="System.InvalidCastException"></exception>
        public static bool UsuarioGetRequiereCambio(int idUsuario)
        {
            try
            {           
                return Convert.ToBoolean(new AutoGeneratedDataTable("SELECT requiereCambio FROM Usuarios WHERE id = " + idUsuario).Rows[0][0]);
            }
            catch (Exception ex)
            {
                _log.TraceException(ex);
                throw ex;
            }
        }
    }
}
