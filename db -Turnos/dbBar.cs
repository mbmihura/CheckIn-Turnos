using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using dbTurnos.Excepciones;
using dbTurnos.DataSQL;

namespace dbTurnos
{
    public static class InterfazDb
    {
        //TODO: cifrar cadena conexion.

        /// <summary>Devuelve un dataTable con los turnos abiertos en la db.</summary>
        /// <exception cref="System.InvalidOperationException"></exception>
        /// <exception cref="System.Data.OleDb.OleDbException"></exception>
        public static DataTable getTurnosAbiertos()
        {
            return new AutoGeneratedDataTable("SELECT Usuarios.usuario, Usuarios.nombre, Turnos.fechaInicio FROM Usuarios INNER JOIN Turnos ON Usuarios.id = Turnos.idUsuario WHERE Turnos.fechaFin is Null").show();
       
        }

        /// <summary>Abre un turno para un usuario, con le fecha especifica, siempre cuando no exista uno ya abierto.</summary>
        /// <exception cref="System.InvalidOperationException"></exception>
        /// <exception cref="System.Data.OleDb.OleDbException"></exception>
        /// <exception cref="dbTurnos.Excepciones.YaTieneTurnoAbiertoException"></exception>
        public static void AbrirTurno(int idUsuario, DateTime inicio)
        {
            //TODO: filtrar campos contra SQL inyection.
            if (new AutoGeneratedDataTable("SELECT id FROM Turnos WHERE idUsuario = "+idUsuario+" AND fechaFin Is Null").Rows.Count != 0)
                throw new YaTieneTurnoAbiertoException();
            new SQLNoConsulta("INSERT INTO Turnos (idUsuario, fechaInicio) VALUES ('" + idUsuario + "', #" + inicio.ToString("yyyy/MM/dd HH:mm:ss") + "#)");
            
        }

        /// <summary>Cierra el turno abierto para un usuario especifico.</summary>
        /// <exception cref="System.InvalidOperationException"></exception>
        /// <exception cref="System.Data.OleDb.OleDbException"></exception>
        /// <exception cref="dbTurnos.Excepciones.NoHayTurnoAbiertoException"></exception>
        /// <exception cref="dbTurnos.Excepciones.InicioTurnoMayorQueFinException"></exception>
        public static void CerrarTurno(int idUsuario, DateTime fin)
        {
            //TODO: filtrar campos contra SQL inyection.
            AutoGeneratedDataTable turnoAbierto = new AutoGeneratedDataTable("SELECT idUsuario, fechaInicio FROM Turnos WHERE (idUsuario = " + idUsuario + " AND fechaFin Is Null)");
            if (turnoAbierto.Rows.Count == 0)
                throw new NoHayTurnoAbiertoException();
            if (Convert.ToDateTime(turnoAbierto.Rows[0]["fechaInicio"]) > fin)
                throw new InicioTurnoMayorQueFinException();
            new SQLNoConsulta("UPDATE Turnos SET fechaFin = #" + fin.ToString("yyyy/MM/dd HH:mm:ss") + "# WHERE (idUsuario  = " + idUsuario + ") AND (fechaFin IS NULL)");
        }

        /// <summary>Cambia la contraseña de un usuario espefcifico.</summary>
        /// <exception cref="System.InvalidOperationException"></exception>
        /// <exception cref="System.Data.OleDb.OleDbException"></exception>
        /// <exception cref="dbTurnos.Excepciones.ContraseñaNoPuedeSerNula"></exception>
        public static void CambiarContraseña(int idUsuario, string nuevaContraseña)
        {
            if (nuevaContraseña == "") throw new ContraseñaNoPuedeSerNula();
            //TODO: cifrar contraseña
            new SQLNoConsulta("UPDATE Usuarios SET Usuarios.contraseñaSHA = '"+nuevaContraseña+"' WHERE Usuarios.id="+idUsuario);
        }

        /// <summary>Devuelve el id del usuario que coincide con  el par usuario/contraseña.</summary>
        /// <exception cref="System.InvalidOperationException"></exception>
        /// <exception cref="System.Data.OleDb.OleDbException"></exception>
        /// <exception cref="dbTurnos.Excepciones.ParUsuarioContraseñaIncorrectoException"></exception>
        /// <exception cref="System.FormatException"></exception>
        /// <exception cref="System.InvalidCastException"></exception>
        /// <exception cref="System.OverflowException"></exception>
        public static int Identificar(string usuario, string contraseña)
        {
            DataTable idTable;
            //TODO: cifrar contraseña
            //TODO: filtar caracteres especiales usuario, cifrar contraseña.

            idTable = new AutoGeneratedDataTable("SELECT TOP 1 Usuarios.id FROM Usuarios WHERE (((Usuarios.usuario)='" + usuario + "') AND ((Usuarios.contraseñaSHA)='" + contraseña + "'))");
            try
            {
                return Convert.ToInt32(idTable.Rows[0][0]);
            }
            catch (IndexOutOfRangeException)
            {
                throw new ParUsuarioContraseñaIncorrectoException();
            }
        }

        /// <exception cref="System.InvalidOperationException"></exception>
        /// <exception cref="System.Data.OleDb.OleDbException"></exception>
        public static bool esAdmin(int idUsuario)
        {
            return new AutoGeneratedDataTable("SELECT id FROM Usuarios WHERE id=" + idUsuario + " AND esAdmin = True").Rows.Count > 0;
        }

        /// <exception cref="System.InvalidOperationException"></exception>
        /// <exception cref="System.Data.OleDb.OleDbException"></exception>
        public static DataTable getUsuarios()
        {
            return new AutoGeneratedDataTable("SELECT id, usuario, nombre, esAdmin FROM Usuarios");
        }

        /// <exception cref="System.InvalidOperationException"></exception>
        /// <exception cref="System.Data.OleDb.OleDbException"></exception>
        public static void UsuariosEliminar(int idUsuario)
        {
            new SQLNoConsulta("DELETE idUsuario FROM Turnos WHERE idUsuario = " + idUsuario);
            new SQLNoConsulta("DELETE usuario FROM Usuarios WHERE (id="+idUsuario+")");
        }

        /// <exception cref="System.InvalidOperationException"></exception>
        /// <exception cref="System.Data.OleDb.OleDbException"></exception>
        public static object getTurnosCumplen(string _filtro)
        {
            return new AutoGeneratedDataTable("SELECT Usuarios.nombre AS Nombre, Turnos.fechaInicio AS Inicio, Turnos.fechaFin AS Fin FROM (Turnos INNER JOIN Usuarios ON Turnos.idUsuario = Usuarios.id) " + _filtro);
        }
    }
}
