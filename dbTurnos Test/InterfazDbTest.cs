using dbTurnos;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Data;
using dbTurnos.DataSQL;

namespace dbTurnos_Test
{
    
    
    /// <summary>
    ///Se trata de una clase de prueba para InterfazDbTest y se pretende que
    ///contenga todas las pruebas unitarias InterfazDbTest.
    ///</summary>
    [TestClass()]
    public class InterfazDbTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Obtiene o establece el contexto de la prueba que proporciona
        ///la información y funcionalidad para la ejecución de pruebas actual.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Atributos de prueba adicionales
        // 
        //Puede utilizar los siguientes atributos adicionales mientras escribe sus pruebas:
        //
        //Use ClassInitialize para ejecutar código antes de ejecutar la primera prueba en la clase 
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup para ejecutar código después de haber ejecutado todas las pruebas en una clase
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize para ejecutar código antes de ejecutar cada prueba
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup para ejecutar código después de que se hayan ejecutado todas las pruebas
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///Una prueba de getTurnosAbiertos
        ///</summary>
        [TestMethod()]
        public void getTurnosAbiertosTest()
        {
            DataTable expected = null; // TODO: Inicializar en un valor adecuado
            DataTable actual;
            actual = InterfazDb.getTurnosAbiertos();
            Assert.AreEqual(expected, actual);
            Assert.Inconclusive("Compruebe la exactitud de este método de prueba.");
        }

        /// <summary>
        ///Una prueba de Identificar
        ///</summary>
        [TestMethod()]
        public void IdentificarTest()
        {
            string usuario = "userTest";
            string contraseña = "userTest";
            int expected = 1;
            //----------------------
            int actual;
            actual = InterfazDb.Identificar(usuario, contraseña);
            Assert.AreEqual(expected, actual);
        }

        /// <summary>
        ///Una prueba de CambiarContraseña
        ///</summary>
        [TestMethod()]
        public void CambiarContraseñaTest()
        {
            int idUsuario = 1;
            string nuevaContraseña = "nuevaPass";
            //-----------------------
            AutoGeneratedDataTable expectedDBState = new AutoGeneratedDataTable("Select id FROM Usuarios Where contraseñaSHA = '"+nuevaContraseña+"' AND id = " + idUsuario);
            int initialRowNumbers = expectedDBState.Rows.Count;
            expectedDBState.show();
            InterfazDb.CambiarContraseña(idUsuario, nuevaContraseña);
            expectedDBState.Refrescar();
            expectedDBState.show();
            Assert.AreEqual(initialRowNumbers, expectedDBState.Rows.Count - 1);
        }

        /// <summary>
        ///Una prueba de AbrirTurno
        ///</summary>
        [TestMethod()]
        public void AbrirTurnoTest()
        {
            int idUsuario = 1; 
            DateTime inicio = new DateTime(2010,1,1,10,10,10);
            //-----------------------
            AutoGeneratedDataTable expectedDBState = new AutoGeneratedDataTable("Select id FROM Turnos Where fechaFin is Null AND idUsuario = 1");
            expectedDBState.show();
            int initialRowCount = expectedDBState.Rows.Count;
            InterfazDb.AbrirTurno(idUsuario, inicio);
            expectedDBState.Refrescar();
            expectedDBState.show();
            Assert.AreEqual(initialRowCount, expectedDBState.Rows.Count - 1);
        }

        /// <summary>
        ///Una prueba de CerrarTurno
        ///</summary>
        [TestMethod()]
        public void CerrarTurnoTest()
        {
            int idUsuario = 1; 
            DateTime fin = new DateTime(2010,1,1,14,30,30);
            //-----------------------
            AutoGeneratedDataTable expectedDBState = new AutoGeneratedDataTable("Select Count(idUsuario) FROM Turnos Where fechaInicio = '20100101', fechaFin is Null, idUsuario = 1");
            int initialRowNumbers = expectedDBState.Rows.Count;
            InterfazDb.CerrarTurno(idUsuario, fin);
            expectedDBState.Refrescar();
            Assert.AreEqual(initialRowNumbers, expectedDBState.Rows.Count + 1);
            Assert.Inconclusive("Un método que no devuelve ningún valor no se puede comprobar.");
       }
    }
}
