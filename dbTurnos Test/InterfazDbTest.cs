using dbTurnos;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Data;
using dbTurnos.DataSQL;
using dbTurnos.Excepciones;

namespace dbTurnos_Test
{
    /// <summary>
    ///clase de prueba unitarias para InterfazDbTest.
    ///</summary>
    [TestClass()]
    public class InterfazDbTest
    {
        private TestContext testContextInstance;
        /// <summary>
        ///Obtiene o establece el contexto de la prueba que proporciona
        ///la información y funcionalidad para la ejecución de pruebas actual.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Atributos de prueba adicionales
        //Use ClassInitialize para ejecutar código antes de ejecutar la primera prueba en la clase 
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup para ejecutar código después de haber ejecutado todas las pruebas en una clase
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize para ejecutar código antes de ejecutar cada prueba
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup para ejecutar código después de que se hayan ejecutado todas las pruebas
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion

        //TODO: no se esta probando getTurnosAbiertos

        /// <summary>prueba de Identificar usuario registrado en db.</summary>
        [TestMethod()]
        public void IdentificarTest()
        {
            string usuario = "userIdenTest";
            string contraseña = "1";
            int expected = 2;
            //----------------------
            int actual;
            actual = InterfazDb.Identificar(usuario, contraseña);
            Assert.AreEqual(expected, actual);
        }
        /// <summary>prueba de avisar que par usuario/contraseña incorrecto en db.</summary>
        [TestMethod()]
        [ExpectedException(typeof(ParUsuarioContraseñaIncorrectoException),"Se esperaba un par usuario contraseña inexistente en Db.")]
        public void IdentificarFallaParUsuarioContraseñaTest()
        {
            string usuario = "userIdenTest";
            string contraseña = "otraQueNoAnda";
            //----------------------
            int actual;
            actual = InterfazDb.Identificar(usuario, contraseña);
        }
        /// <summary>
        ///Una prueba de CambiarContraseña
        ///</summary>
        [TestMethod()]
        public void CambiarContraseñaTest()
        {
            int idUsuario = 1;
            string nuevaContraseña = "nuevaPass";
            //-----------------------
            AutoGeneratedDataTable expectedDBState = new AutoGeneratedDataTable("Select id, contraseñaSHA FROM Usuarios Where contraseñaSHA = '"+nuevaContraseña+"' AND id = " + idUsuario);
            if (expectedDBState.Rows.Count != 0)
                Assert.Inconclusive("La contraseña que se trato de cambiar ya estaba cambiada.");
            else
            {
                int initialRowNumbers = expectedDBState.Rows.Count;
                InterfazDb.CambiarContraseña(idUsuario, nuevaContraseña);
                expectedDBState.Refrescar();
                Assert.AreEqual(initialRowNumbers, expectedDBState.Rows.Count - 1);
            }
        }

        /// <summary>prueba de AbrirTurno exitosamente</summary>
        [TestMethod()]
        public void AbrirTurnoTest()
        {
            int idUsuario = 1; 
            DateTime inicio = new DateTime(2010,1,1,10,10,10);
            //-----------------------
            AutoGeneratedDataTable expectedDBState = new AutoGeneratedDataTable("Select id FROM Turnos Where fechaInicio = #" + inicio.ToString("yyyy/MM/dd HH:mm:ss") + "# AND fechaFin is Null AND idUsuario = " + idUsuario);
            int initialRowCount = expectedDBState.Rows.Count;
            InterfazDb.AbrirTurno(idUsuario, inicio);
            expectedDBState.Refrescar();
            Assert.AreEqual(initialRowCount, expectedDBState.Rows.Count - 1);
        }

        /// <summary>prueba de CerrarTurno exitosamente</summary>
        [TestMethod()]
        public void CerrarTurnoTest()
        {
            int idUsuario = 1; 
            DateTime fin = new DateTime(2011,1,1,14,30,30);
            //-----------------------
            AutoGeneratedDataTable expectedDBState = new AutoGeneratedDataTable("Select idUsuario,fechaInicio FROM Turnos Where fechaFin Is Null AND idUsuario = " + idUsuario);
            int initialRowNumbers = expectedDBState.Rows.Count;
            DateTime inicio = Convert.ToDateTime(expectedDBState.Rows[0][1]);
            InterfazDb.CerrarTurno(idUsuario, fin);
            expectedDBState.ConsultaSQL = "Select idUsuario FROM Turnos Where fechaInicio = #" + inicio.ToString("yyyy/MM/dd HH:mm:ss") + "# AND fechaFin = #" + fin.ToString("yyyy/MM/dd HH:mm:ss") + "# AND idUsuario = " + idUsuario;
            expectedDBState.Refrescar();
            Assert.AreEqual(initialRowNumbers, expectedDBState.Rows.Count);
       }
        /// <summary>prueba Falla al trar de AbrirTurno con uno ya abierto</summary>
        [TestMethod()]
        [ExpectedException(typeof(YaTieneTurnoAbiertoException))]
        public void AbrirTurnoTestConUnoYaAbierto()
        {
            int idUsuario = 2;
            DateTime inicio = new DateTime(2010, 1, 1, 10, 10, 10);
            //-----------------------
            InterfazDb.AbrirTurno(idUsuario, inicio);
            InterfazDb.AbrirTurno(idUsuario, inicio);
        }
        /// <summary>prueba de CerrarTurno sin turno abierto.</summary>
        [TestMethod()]
        [ExpectedException(typeof(NoHayTurnoAbiertoException))]
        public void CerrarTurnoTestSinTurnoAbierto()
        {
            int idUsuario = 2;
            DateTime fin = new DateTime(2011, 1, 1, 14, 30, 30);
            //-----------------------
            InterfazDb.CerrarTurno(idUsuario, fin);
            InterfazDb.CerrarTurno(idUsuario, fin);
        }
        /// <summary>prueba de CerrarTurno con fecha posterior a la fecha de cierre.</summary>
        [TestMethod()]
        [ExpectedException(typeof(InicioTurnoMayorQueFinException))]
        public void CerrarTurnoTestConFechaPreviaAFechaApertura()
        {
            int idUsuario = 3;
            DateTime fecha = new DateTime(2011, 1, 1, 14, 30, 30);
            //-----------------------
            InterfazDb.AbrirTurno(idUsuario, fecha);
            InterfazDb.CerrarTurno(idUsuario, fecha.AddSeconds(-20));
        }
    }
}
